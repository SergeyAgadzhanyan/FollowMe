{
	"info": {
		"_postman_id": "8f453f6a-2428-4fd6-987c-822b6b1e05bb",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26778855"
	},
	"item": [
		{
			"name": "User create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "User create 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"user2\",\n    \"email\": \"user2@user.com\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Category create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Концерты\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\n  \"category\": 1,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Event create 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Сплав на байдарках похож на полет 2.\",\n  \"category\": 1,\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": false,\n  \"title\": \"Сплав на байдарках\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса\",\n  \"category\": 1,\n  \"description\": \"От английского SUP - Stand Up Paddle — \\\"стоя на доске с веслом\\\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.\",\n  \"eventDate\": \"2025-10-11 23:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 7,\n  \"requestModeration\": false,\n  \"stateAction\": \"PUBLISH_EVENT\",\n  \"title\": \"Сап прогулки по рекам и каналам\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"test comment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				},
				"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
			},
			"response": []
		},
		{
			"name": "Create comment 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"test comment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				},
				"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
			},
			"response": []
		},
		{
			"name": "Create comment 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"test comment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				},
				"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
			},
			"response": []
		},
		{
			"name": "update comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\":\"updated comment\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update comment wrong event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\":\"updated comment\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "999"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update comment wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\":\"updated comment\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "999"
						},
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment wrong event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "999"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "999"
						},
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment 2 by admin wrong event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "999"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment 2 by admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId/comment/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId",
						"comment",
						":commentId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get event with comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\",  function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/events/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}